@anthony_demo_db_test
# ---> You start off with testing the database -->
#
POST TRD http://nyldvfxap02:1323/raft/db "select external_key, trade_source, product_id, premium_type, market, aggressor_side, trade_mic from TRADE where EXTERNAL_KEY = '976743570'"
VALIDATE TRD.external_key "976743570"
VALIDATE TRD.trade_source "VOLS"
VALIDATE TRD.product_id "62"
VALIDATE TRD.premium_type "F"
VALIDATE TRD.market "OTC"
VALIDATE TRD.aggressor_side "2"
VALIDATE TRD.trade_mic "GFSO"

@anthony_demo_code_exec
# --> Then surround it with actual code execution --->
#
FIX_LOGON ragu.prabhakaran@anz.com p ANZP GFI -H cdev2 -s docs_config_gfi.cfg -i SD
FIX_LOGON hsbc.api p HSBC GFI -H cdev2 -s docs_config_gfi.cfg -i SD
NEW_ORDER_SINGLE_BUY_NO_ACK $alias=ragu.prabhakaran@anz.com $symbol=EURUSD $mqsize=15 $fwdprice=10.8 $volatility=6.50 $timeinforce=1 $tablecode=EURUSD_1_1_0_8_7
FIX_ACK ragu.prabhakaran@anz.com -p [35=8 39=0 151=15] -t 3000
NEW_ORDER_SINGLE_SELL_NO_ACK $alias=hsbc.api $symbol=EURUSD $mqsize=15 $fwdprice=10.2 $volatility=5.50 $timeinforce=1 $tablecode=EURUSD_1_1_0_8_7
FIX_ACK hsbc.api -p [35=8 39=0 151=15] -t 3000
WAIT -t 3000
FIX_CAPTURE ragu.prabhakaran@anz.com 5001 ANTHONY_KEY -t 3000
PRINT_VAR ragu.prabhakaran@anz.com ANTHONY_KEY
FIX_ACK ragu.prabhakaran@anz.com -p [35=8 39=2 151=0 5678=6.5 5001=<?>] -t 3000
FIX_ACK hsbc.api -p [35=8 39=2 151=0 5678=6.5] -t 3000
POST TRD http://nyldvfxap02:1323/raft/db "select external_key, trade_source, product_id, premium_type, market, aggressor_side, trade_mic from TRADE where EXTERNAL_KEY = '{ANTHONY_KEY.ACK}'"
VALIDATE TRD.external_key "{ANTHONY_KEY.ACK}"
VALIDATE TRD.trade_source "VOLS"
VALIDATE TRD.product_id "1"
VALIDATE TRD.premium_type "F"
VALIDATE TRD.market "OTC"
VALIDATE TRD.aggressor_side "2"
VALIDATE TRD.trade_mic "GFSO"
FIX_LOGOFF ragu.prabhakaran@anz.com
FIX_LOGOFF hsbc.api

@anthony_demo_trade
# --> Then allow the user to extend it and repeat it --->
$symbol=EURUSD
$tablecode=EURUSD_1_1_0_8_7
FIX_LOGON ragu.prabhakaran@anz.com p ANZP GFI -H cdev2 -s docs_config_gfi.cfg -i SD
FIX_LOGON hsbc.api p HSBC GFI -H cdev2 -s docs_config_gfi.cfg -i SD
NEW_ORDER_SINGLE_BUY_NO_ACK $alias=ragu.prabhakaran@anz.com $symbol=$symbol $mqsize=15 $fwdprice=10.8 $volatility=6.50 $timeinforce=1 $tablecode=$tablecode
FIX_ACK ragu.prabhakaran@anz.com -p [35=8 39=0 151=15] -t 3000
NEW_ORDER_SINGLE_SELL_NO_ACK $alias=hsbc.api $mqsize=15 $fwdprice=10.2 $volatility=5.50 $timeinforce=1 $tablecode=$tablecode
FIX_ACK hsbc.api -p [35=8 39=0 151=15] -t 3000
WAIT -t 3000
FIX_CAPTURE ragu.prabhakaran@anz.com 5001 ANTHONY_KEY -t 3000
PRINT_VAR ragu.prabhakaran@anz.com ANTHONY_KEY
FIX_ACK ragu.prabhakaran@anz.com -p [35=8 39=2 151=0 5678=6.5 5001=<?>] -t 3000
FIX_ACK hsbc.api -p [35=8 39=2 151=0 5678=6.5] -t 3000
POST TRD http://nyldvfxap02:1323/raft/db "select external_key, trade_source, product_id, premium_type, market, aggressor_side, trade_mic from TRADE where EXTERNAL_KEY = '{ANTHONY_KEY.ACK}'"
VALIDATE TRD.external_key "{ANTHONY_KEY.ACK}"
VALIDATE TRD.trade_source "VOLS"
VALIDATE TRD.product_id "1"
VALIDATE TRD.premium_type "F"
VALIDATE TRD.market "OTC"
VALIDATE TRD.aggressor_side "2"
VALIDATE TRD.trade_mic "GFSO"
FIX_LOGOFF ragu.prabhakaran@anz.com
FIX_LOGOFF hsbc.api

@ANTHONY_DB_DEMO
# --> Which leaves you with this -->
anthony_demo_db_test
anthony_demo_code_exec
anthony_demo_trade



#---
#
# 1. Clear cache
# 2. Budapest cut @ 50.0
# 3. Budapest cut @ 60.0 but at same time
# 4. Make sure a Budapest cut @ other prices but slightly early/delayed cut timestamps are accepted (within 5 minutes)
# 5. Make sure budapest is still at 50 in cache
# 6. Budapest cut in loop 250 times with same price, making sure there is no race condition
# 7. Budapest and Tokyo loop 1000 times, making sure price is shown
# 8. Budapest cut at price below 0
# 9. Make sure cache does not include this new value
# 10. How do I test if the failure case hit?
#     * Maybe in simulation mode do I store all failures into a cache? For example, if an error log statement gets hit, store it in the # simulation error cache?
#     * Now QA comes up to me and says, "Hey -- what about when the queue is gets slow? Can we make the queue slow?"
#    * And I respond, "Sure, I will expose an endpoint that when hit turns on a 2 second delay for every request on the traffic queue"
#
# What do you get from the above?
# 1. The cache is the source of truth
# 2. There is a centralized queue that handles all traffic that should be quick without delays
# 3. There are multiple time cuts and there can be a large amount of requests per seconds
# 4. There timing considerations to be aware of when it comes to the cut time and the request timestamp
# 5. The cut name, like "NEW_YORK_TEN_AM", is actually transformed to a number (that ForexMatch recognizes)
#
# And indirectly, you have learned:
# 1. There are endpoints you can hit to gain information on the internals of NCFX
# 2. The host and port NCFX runs on
# 3. Input barriers like price cannot be below 0.0