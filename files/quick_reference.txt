# QUICK REFERENCE

# RAFT COMMANDS:
#
# The following commands are supported by RAFT directly.
#
# In the commands below, the format lists the command name, followed required parameters in angle brackets and optional
# parameters in square brackets. Notes (if present) are provided in parentheses; if a parameter is not explicitly
# preceded by a -flag, it is assumed to be a positional parameter that must be supplied in the order listed.
# A * symbol indicates that a parameter can be repeated multiple times.
#
#
# FIX COMMANDS:
#
# FIX_SEND: This command is used to send a FIX message to the server. The session must correspond to a unique alias
# (established on logon).
# Usage: FIX_SEND <alias> <message template (containing at least 35=<msgtype>)> [-d <delimiter>] [-f <field/group>]* [-F <auto tag>]* [-c (clear incoming buffer before sending)]
#
# FIX_ACK: Used to acknowledge a FIX message received from the server. The session must correspond to a unique alias
# (established on logon).
# Usage: FIX_ACK <alias> <-p <pattern>>* [-d <delimiter>] [-M (multi-ack)] [-m <max acks>] [-t <timeout (ms)>] [-r (repeatable)] [-i <field to ignore>]* [-C <compare method (ORDERED/ORDERED_PARTIAL)>] [-P <ignore policy (IGNORE_ALL/IGNORE_HEADERS_ONLY/IGNORE_NONE)>]
#
# FIX_LOGON: Used to log on to the server and create an alias for the session. If an alias is not explicitly set, the
# username is used. Aliases MUST be unique for each live session.
# Usage: FIX_LOGON <username> <password> <senderCompId> <targetCompId> [-A <alias>] [-s <settings file>] [-H <host (known host, e.g. bgccdev2 or server:port)>] [-V <FIX version to use (e.g. 4.4)>] [-i <ignored message type (auto-discards incoming messages with given 35=type field)>]*
#
# FIX_LOGON_ACK: Used to check if an alias is logged in.
# Usage: FIX_LOGON_ACK <alias>
#
# FIX_LOGOFF: Used to log off from the server and remove the alias.
# Usage: FIX_LOGOFF <alias> [-g <custom message>] [-e] (check if the incoming buffer is empty; skip logoff if not)
#
# FIX_LOGOFF_ACK: Used to check if an alias is logged off (inverted FIX_LOGON_ACK).
# Usage: FIX_LOGOFF_ACK <alias>
#
# FIX_LOGOFF_ALL: Used to log off from the server and remove all aliases.
# Usage: FIX_LOGOFF_ALL [-t <timeout (ms)>]
#
# FIX_CLEAR_BUFFER: Used to clear the incoming buffer for a given alias.
# Usage: FIX_CLEAR_BUFFER <alias> [-t <timeout (ms)>] [-m <max messages to clear (default: unlimited)>] [-p <pattern (for conditional matching)>]* [-d <delimiter>] [-C <compare method (ORDERED/ORDERED_PARTIAL)>] [-P <ignore policy (IGNORE_ALL/IGNORE_HEADERS_ONLY/IGNORE_NONE)>]
#
# FIX_CLEAR_BUFFER_ACK: Used to check if the incoming buffer for a given alias is empty.
# Usage: FIX_CLEAR_BUFFER_ACK <alias> [-t <timeout (ms)>] [-I] (invert the result -- true if buffer is NOT empty).
#
# FIX_PRINT_BUFFER: Used to print the incoming buffer for a given alias.
# Usage: FIX_PRINT_BUFFER <alias> [-t <timeout (ms)>]
#
# FIX_CAPTURE: Used to capture a field from a FIX message associated with a given alias.
# Usage: FIX_CAPTURE <alias> <tag to capture> <capture name> [-t <timeout (ms)>] [-o <true/false> (using outgoing buffer, default: false)] [-M] (multi-capture, if more than instance of tag possible in message) [-n <index (to capture single field instance from multi-match)>] [-d <delimiter (pattern to join all multi-match values on)>]
#
#
# CONTROL FLOW:
#
# TRUE: Returns true.
# Usage: TRUE
#
# FALSE: Returns false.
# Usage: FALSE
#
# NOT: Returns the opposite of the result of the given execution result.
# Usage: NOT <[FUNCTION]> (e.g. NOT [TRUE] or NOT [FIX_LOGON_ACK <alias>] -- NOTE: functions must be enclosed in square brackets)
#
# OR: Returns true if any of the given execution results are true. Short circuits on first true result.
# Usage: OR <[FUNCTION1]> <[FUNCTION2]> (e.g. OR [TRUE] [FALSE] or OR [FIX_LOGON_ACK <alias>] [FIX_LOGOFF_ACK <alias>])
#
# IF: Given condition function, executes true/false path depending on whether condition succeeded.
# Usage: IF <[CONDITION COMMAND/FUNCTION]> [[SUCCESS: COMMAND1/FUNCTION1]] [[COMMAND2/FUNCTION2]] (note -- any text is permitted between brackets, most commonly IF [condition] THEN [true path] ELSE [false path])
#
# REPEAT: Repeat a function a specified number of times. If any intermediate result returns failure, break immediately.
# Note: Early breaking can be avoided by wrapping command in IF []
# Usage: REPEAT <[COMMAND/FUNCTION]> <-X <count>>
#
# WAIT: Pauses RAFT for specified length of time.
# Usage: WAIT <-t <timeout (ms)>>
#
# SKIP_PREPROCESSOR: Bypasses compile-time checks/translation on provided function.
# Usage: SKIP_PREPROCESSOR <[COMMAND/FUNCTION]>
#
#
# POST-VALIDATE:
#
# POST: Sends a POST message to a given endpoint; stores reply in supplied key.
# Usage: POST <key> <endpoint> <message>
#
# VALIDATE: Checks if provided message matches the curernt value in supplied key.
# Usage: VALIDATE <key (key.field)> <expected value>
#
#
# MISCELLANEOUS:
#
# PRINT_VAR: Prints the current value of a live variable given the session alias (user) and variable name.
# Usage: PRINT_VAR <alias> <variable name> [-n <index to use for lookup (if multiple, delimiter-separated values expected)] [-d <delimiter (if delimiter is present, treat stored variable values as an array>]
#
# PRINT: Prints the given tokens.
# Usage: PRINT [token]* [-o <outstream (if provided, will also attempt to write given tokens to file>]


# SPECIAL PATTERNS:
#
# The following special patterns are used to match specific characters in the input:
#
# '\n' = &newline;
# ' ' = &space;
# '$' = &dollar;
# '%' = &percent;
# '&' = &amp;
# '#' = &hash;
# '=' = &eq;
# '[' = &lbrack;
# ']' = &rbrack;
# 'SoH' = &fixdelim; ('\u0001')
# '"' = &quote;
# '<' = &lt;
# '>' = &gt;
# '|' = &pipe;
# '{' = &lcurl;
# '}' = &rcurl;
# ':' = &colon;
# '-' = &dash;
# ';' = &semicolon;
# '_' = &underscore;
# "'" = &apostrophe;
# '\\' = &backslash;
# '/' = &frontslash;
# '`' = &backtick;
# ',' = &comma;
#
# Additionally, the following characters are replaced with their Unicode equivalents:
# '<' = "\u003C"; (NOTE: This is a special character in HTML)
# '>' = "\u003E"; (NOTE: This is a special character in HTML)


# RAFT ENDPOINTS:
#
# / : Home page
# /help : Help information
# /docs : Help information
# /retrieve : Lists all available RAFT run logs in CDS
# /retrieve/raft : Lists all available RAFT run logs in CDS
# /retrieve/ls/raft : Lists all available RAFT run logs in CDS
# /retrieve/raft/{log_name} : Returns the contents of a specific RAFT run log from CDS
# /retrieve/raft/cat/{log_name} : Returns the contents of a specific RAFT run log from CDS
# /retrieve/latest : Returns the contents of the latest RAFT run log on CDS
# /retrieve/ls : Lists all available logs in CDS
# /retrieve/script/{log_folder}/{log_name} : Returns the contents of a specific script log on CDS
# /retrieve/latest/{log_folder} : Returns the contents of the latest report for the given folder on CDS
# /retrieve/run/raft : Reruns the latest RAFT run log on CDS and retrieves the results (warning: assumes single-threaded access!)
# /retrieve/run/script/{log_name} : Reruns a specific RAFT run log on CDS and retrieves the results (warning: assumes single-threaded access!)
# /internal/posts : todo
# /validate/ : todo
# /validate/{id} : todo
# /execute/{name} : Executes a named block directly (assumes all named blocks are unique)
# /execute/{script_id}/{name} : Executes a named block based on full block name (e.g. 1/block_name)
# /execute/lookup/{script_name}/{name} : Executes a named block based on full block name (with name lookup, e.g. script_name/block_name)
# /run/script/{id} : Runs all the blocks within a script based on its ID
# /run/script/all/{id} : Runs all the blocks within a script based on its ID
# /run/script/named/{id} : Runs only the named blocks within a script based on its ID
# /run/script/unnamed/{id} : Runs only the unnamed blocks within a script based on its ID
# /run/script/anonymous/{id} : Runs only the unnamed blocks within a script based on its ID
# /run/script/lookup/{name} : Runs all the blocks within a script based on its name
# /run/script/lookup/all/{name} : Runs all the blocks within a script based on its name
# /run/script/lookup/named/{name} : Runs only the named blocks within a script based on its name
# /run/script/lookup/unnamed/{name} : Runs only the unnamed blocks within a script based on its name
# /run/script/lookup/anonymous/{name} : Runs only the unnamed blocks within a script based on its name
# /run/collection/{collection_id} : Runs all the scripts within a collection based on its ID
# /run/collection/all/{collection_id} : Runs all the scripts within a collection based on its ID
# /run/collection/named/{collection_id} : Runs only the named scripts within a collection based on its ID
# /run/collection/unnamed/{collection_id} : Runs only the unnamed scripts within a collection based on its ID
# /run/collection/anonymous/{collection_id} : Runs only the unnamed scripts within a collection based on its ID
# /run/collection/lookup/{name} : Runs all the scripts within a collection based on its name
# /run/collection/lookup/all/{name} : Runs all the scripts within a collection based on its name
# /run/collection/lookup/named/{name} : Runs only the named scripts within a collection based on its name
# /run/collection/lookup/unnamed/{name} : Runs only the unnamed scripts within a collection based on its name
# /run/collection/lookup/anonymous/{name} : Runs only the unnamed scripts within a collection based on its name
# /run/all : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/all/all : Runs all the scripts within all collections; all blocks (named and unnamed) are executed.
# /run/all/named : Runs all the scripts within all collections; only named blocks are executed.
# /run/all/unnamed : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/all/anonymous : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/all/default : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/default : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/named : Runs all the scripts within all collections; only named blocks are executed
# /run/unnamed : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /run/anonymous : Runs all the scripts within all collections: note that by default only unnamed blocks (callers) are invoked
# /analyze/fix : todo
# /analyze/script : todo
# /state : Returns the current state of the system (collections/scripts/translated blocks available) and the details (names, variable information, and executables) associated with all blocks
# /state/raw : Returns the raw state of the system (debugging)
# /state/callable : Returns the callable named blocks (ones that can be executed directly via /execute/{name})
# /state/named : Returns the details (names, variable information, and executables) associated with all named blocks
# /state/headers : Returns the headers (names and variable information) of all named blocks
# /state/details : Returns the details (names, variable information, and executables) associated with all named blocks
# /state/named/headers : Returns the headers (names and variable information) of all named blocks
# /state/named/details : Returns the details (names, variable information, and executables) associated with all named blocks
# /state/unnamed : Returns the details (executable lines) associated with all unnamed blocks; note that these blocks cannot be accessed directly, but can be executed
# /state/anonymous : Returns the details (executable lines) associated with all unnamed blocks; note that these blocks cannot be accessed directly, but can be executed
# /state/unnamed/details : Returns the details (executable lines) associated with all unnamed blocks; note that these blocks cannot be accessed directly, but can be executed
# /state/anonymous/details : Returns the details (executable lines) associated with all unnamed blocks; note that these blocks cannot be accessed directly, but can be executed
# /state/all : Returns the current state of the system (collections/scripts/translated blocks available) and the details (names, variable information, and executables) associated with all blocks
# /state/all/headers : Returns the headers (names and variable information) of all blocks (named and unnamed)
# /state/all/details : Returns the current state of the system (collections/scripts/translated blocks available) and the details (names, variable information, and executables) associated with all blocks
# /state/translate : Returns the translated blocks (i.e. blocks with function calls and variables replaced with executable lines) associated with all blocks
# /state/translate/all : Returns the translated blocks (i.e. blocks with function calls and variables replaced with executable lines) associated with all blocks
# /state/translate/named : Returns the translated blocks (i.e. blocks with function calls and variables replaced with executable lines) associated with all named blocks
# /state/translate/unnamed : Returns the translated blocks (i.e. blocks with function calls and variables replaced with executable lines) associated with all unnamed blocks
# /state/translate/anonymous : Returns the translated blocks (i.e. blocks with function calls and variables replaced with executable lines) associated with all unnamed blocks
# /state/collection/update : todo
# /state/script/update: todo

# KNOWN FIX HOSTS
#
# The following is a list of known FIX hosts that can be used with the FIX_LOGON command (without server:port syntax):
#
# bgccdev1 (at nyldvfxap03:20000)
# bgccdev2 (at nyldvfxap04:20000)
# cdev1 (at nyldvfxap01:20000)
# cdev2 (at nyldvfxap02:20000)
# qa3 (at nylqfxap05:20000)
# vqa1 (at nylqvfxap08:20800)
# vqa2 (at nylqvfxap02:20800)
# vqa3 (at nylqvfxap03:20800)
# vqa4 (at nylqvfxap04:20800)
# vqa5 (at nylqvfxap05:20800)
# vqa6 (at nylqvfxap06:20800)
# vqa7 (at nylqvfxap07:20800)
# vqa8 (at nylqvfxap01:20800)
# bgcstg1 (at ny4lsvfx03:20000)
# bgcstg2 (at ny4lsvfx04:20000)
# estg1 (at ny4lsvfx01:20000)
# estg2 (at ny4lsvfx02:20000)


# CONFIGURABLE SETTINGS
#
# The following is a list of settings that can be adjusted to modify RAFT's behavior. Note: many settings are inherited
# from QuickFIX/J, and are not listed here. For a full list of QuickFIX/J settings, please refer to the QuickFIX/J
# documentation at https://www.quickfixj.org/usermanual/2.3.0/usage/configuration.html
#
# Note that settings below must be specified under a [DEFAULT] header, rather than a [SESSION] header. Settings can
# be overridden on a per-session basis by using the -s flag in the FIX_LOGON command with the path to a settings file.
#
# Some relevant QuickFIX/J settings include:
#
# ConnectionType: The type of FIX connection to establish (RAFT must run as initiator).
# SocketConnectHost: The default FIX host to connect to.
# SocketConnectPort: The default FIX port to connect to.
# TimeZone: The timezone to use for FIX timestamps (default UTC).
# HeartBtInt: The FIX heartbeat interval in seconds (BGC defaults to 10)
# DataDictionary: The data dictionary associated with the FIX spec to test (e.g. fixapi.msg44.xml)
# ScreenLogShowIncoming (Y/N): Select whether to display incoming messages (i.e. dump incoming to terminal screen).
# ScreenLogShowOutgoing (Y/N): Select whether to display outgoing messages (i.e. dump outgoing to terminal screen).
# ScreenLogShowEvent (Y/N): Select whether to display event messages (i.e. dump events to terminal screen).
# ScreenLogShowHeartBeats (Y/N): Select whether to display heartbeat messages (i.e. dump heartbeats to terminal screen).
#
# RAFT-specific settings include:
#
# StandardLibrary: The path to the standard library file (default stdlib.txt). The standard library contains some common
# RAFT building blocks that can be used in scripts (e.g. common FIX message templates).
#
# RaftPort: The port to use for RAFT's API. This is the port that the RAFT server listens on for incoming requests.
#
# RaftBlockCacheSize: The size of the block cache used by RAFT. This cache stores translated blocks for reuse. That is,
# if @block is called, the block is translated (e.g. to commands A, B, C) and stored in the cache.
# If @block is called again (with the same parameters, if any are present), the cached version of the block is used.
# The RaftBlockCacheSize setting determines the maximum number of translated blocks that can be stored in the cache.
#
# RaftAnnotatorCacheSize: The size of the annotator cache used by RAFT. Multiple annotators can be stored in the cache
# simultaneously (annotator id : annotator). Script annotators contain the entire current in-memory structure of
# all scripts; caching the annotators allows for retrieval of the annotator later. The RaftAnnotatorCacheSize setting
# determines the maximum number of annotator ids that can be stored in the cache.
#
# RaftMaxBlockTranslationDepth: The maximum depth of block translation that RAFT will allow. This setting is used to
# limit the depth of nested function calls: e.g. if func1 calls func2, the depth is 2. This setting terminates the
# RAFT if the maximum depth is exceeded.
#
# RaftMaxNumOfFixSessions: The maximum number of FIX sessions that RAFT will allow to be active simultaneously.
#
# RaftFixBufferCapacityPerSession: The maximum number of FIX messages that RAFT will allow to be stored in the incoming
# message buffer. The buffer can be cleared via FIX_CLEAR_BUFFER or FIX_ACK commands.
#
#
# CDS connection settings (certain endpoints allow querying/retrieving reports from CDS):
#
# CDSHost: The host to use for CDS connections.
#
# CDSTimeout: The timeout to use for CDS connections.
#
# CDSReportsPath: The path to the report runner directory on CDS.
#
# CDSReportOutputPath: The path to the report output directory on CDS.
#
# RaftRunAllHourlyCDS: The name of the hourly report to run on CDS.
#
# RaftRunAllNowCDS: The name of the immediate "runAll" report to run on CDS.

